// name 3-lisp: an infinite tower of meta-circular interpreters.
// id 3-lisp
// +# blog 3-lisp
// +# timeline 2022/08/22
// +tags programming

; img
/ url https://raw.githubusercontent.com/nikitadanilov/nikitadanilov.github.io/master/3-lisp/epigraph.png
/ width 75%

| Source
/ += . "Source" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.lisp#L259

*Précis*

3-LISP is a dialect of LISP designed and implemented by Brian C. Smith as part
of his PhD. thesis Procedural Reflection in Programming Languages (what this
thesis refers to as "reflection" is nowadays more usually called
"reification"). A 3-LISP program is conceptually executed by an interpreter
written in 3-LISP that is itself executed by an interpreter written in 3-LISP
and so on _ad infinitum_. This forms a (countably) infinite tower of
meta-circular (_v.i._) interpreters. _reflective lambda_ is a function that is
executed one tower level above its caller. Reflective lambdas provide a very
general language extension mechanism.
/ += . "Brian C. Smith" -> https://en.wikipedia.org/wiki/Brian_Cantwell_Smith
/ += . "Procedural Reflection in Programming Languages" -> https://dspace.mit.edu/handle/1721.1/15961
/ += . "reflection" -> https://en.wikipedia.org/wiki/Reflective_programming
/ += . "reification" -> https://en.wikipedia.org/wiki/Reification_(computer_science)

The code is here.
/ += . "here" -> https://github.com/nikitadanilov/3-lisp

*Meta-circular interpreters*

An interpreter is a program that executes programs written in some programming language.
/ += . "interpreter" -> https://en.wikipedia.org/wiki/Interpreter_(computing)

A meta-circular interpreter is an interpreter for a programming language written
in that language. Meta-circular interpreters can be used to clarify or define
the semantics of the language by reducing the full language to a sub-language in
which the interpreter is expressed.  Historically, such _definitional
interpreters_ become popular within the functional programming community, see
the classical Definitional interpreters for higher-order programming
languages. Certain important techniques were classified and studied in the
framework of meta-circular interpretation, for example, continuation passing
style can be understood as a mechanism that makes meta-circular interpretation
independent of the evaluation strategy: it allows an eager meta-language to
interpret a lazy object language and _vice versa_. As a by-product, a
continuation passing style interpreter is essentially a state machine and so can
be implemented in hardware, see The Scheme-79 chip. Similarly,
_de-functionalisation_ of languages with higher-order functions obtains for them
first-order interpreters. But meta-circular interpreters occur in imperative
contexts too, for example, the usual proof of the Böhm–Jacopini theorem
(interestingly, it was Corrado Böhm who first introduced meta-circular
interpreters in his 1954 PhD. thesis) constructs for an Algol-like language a
meta-circular interpreter expressed in some goto-less subset of the language and
then specialises this interpreter for a particular program in the source
language.
/ += . "Definitional interpreters for higher-order programming languages" -> https://surface.syr.edu/cgi/viewcontent.cgi?article=1012&amp;context=lcsmith_other
/ += . "continuation passing style" -> https://en.wikipedia.org/wiki/Continuation-passing_style
/ += . "evaluation strategy" -> https://en.wikipedia.org/wiki/Evaluation_strategy
/ += . "The Scheme-79 chip" -> https://dspace.mit.edu/handle/1721.1/6334
/ += . "de-functionalisation" -> https://www.brics.dk/RS/08/4/BRICS-RS-08-4.pdf
/ += . "Böhm–Jacopini theorem" -> https://en.wikipedia.org/wiki/Structured_program_theorem
/ += . "Corrado Böhm" -> https://en.wikipedia.org/wiki/Corrado_B%C3%B6hm
/ += . "specialises" -> https://en.wikipedia.org/wiki/Partial_evaluation
/ += . "meta-circular interpreter(?= is)" -> https://en.wikipedia.org/wiki/Meta-circular_evaluator

Given a language with a meta-circular interpreter, suppose that the language is
extended with a mechanism to _trap_ to the meta-level. For example, in a
LISP-like language, that trap can be a new special form `(reflect FORM)` that
directly executes (rather than interprets) `FORM` within the interpreter. Smith
is mostly interested in reflective (i.e., reification) powers obtained this way,
and it is clear that the meta-level trap provides a very general language
extension method: one can add new primitives, data types, flow and sequencing
control operators, etc. But if you try to add `reflect` to an existing LISP
meta-circular interpreter (for example, see p. 13 of LISP 1.5 Programmers
Manual) you'd hit a problem: `FORM` cannot be executed at the meta-level,
because at this level it is not a form, but an S-expression.
/ += . "LISP 1.5 Programmers Manual" -> https://www.softwarepreservation.org/projects/LISP/book/LISP%201.5%20Programmers%20Manual.pdf
/ += . "S-expression" -> https://en.wikipedia.org/wiki/S-expression

*Meta-interpreting machine code*

To understand the nature of the problem, consider a very simple case: the object
language is the machine language (or equivalently the assembly language) of some
processor. Suppose that the interpreter for the machine code is written in (or,
more realistically, compiled to) the same machine language. The interpreter
maintains the state of the simulated processor that is, among other things
registers and memory. Say, the object (interpreted) code can access a register,
`R0`, then the interpreter has to keep the contents of this register somewhere,
but typically not in _its_ (interpreter's) `R0`. Similarly, a memory word
visible to the interpreted code at an address `ADDR` is stored by the
interpreter at some, generally different, address `ADDR'` (although, by applying
the contractive mapping theorem and a _lot_ of hand-waving one might argue that
there will be at least one word stored at the same address at the object- and
meta-levels). Suppose that the interpreted machine language has the usual
sub-routine call-return instructions `call ADDR` and `return` and is extended
with a new instruction `reflect ADDR` that forces the interpreter to call the
sub-routine `ADDR`. At the very least the interpreter needs to convert `ADDR` to
the matching `ADDR'`. This might not be enough because, for example, the
object-level sub-routine `ADDR` might not be contiguous at the meta-level, i.e.,
it is not guaranteed that if `ADDR` maps to `ADDR'` then `(ADDR + 1)` maps
`(ADDR' + 1)`. This example demonstrates that a reflective interpreter needs a
systematic and efficient way of converting or translating between object- and
meta-level representations. If such a method is somehow provided, `reflect` is a
very powerful mechanism: by modifying interpreter state and code it can add new
instructions, addressing modes, condition bits, branch predictors, etc.
/ += . "contractive mapping theorem" -> https://en.wikipedia.org/wiki/Banach_fixed-point_theorem

*N-LISP for a suitable value of N*

In his thesis Prof. Smith analyses what would it take to construct a dialect of
LISP for which a faithful reflective meta-circular interpreter is possible. He
starts by defining a formal model of computation with an (extremely) rigorous
distinction between meta- and object- levels (and, hence, between use and
mention). It is then determined that this model can not be satisfactorily
applied to the _traditional_ LISP (which is called 1-LISP in the thesis and is
mostly based on Maclisp). The reason is that LISP's notion of evaluation
conflates two operations: normalisation that operates within the level and
reference that moves one level down. A dialect of LISP that consistently
separates normalisation and reference is called 2-LISP (the then new Scheme is
called 1.75-LISP). Definition of 2-LISP occupies the bulk of the thesis,
which the curious reader should consult for (exciting, believe me) details.
/ += . "use and mention" -> https://en.wikipedia.org/wiki/Use%E2%80%93mention_distinction
/ += . "Maclisp" -> https://en.wikipedia.org/wiki/Maclisp
/ += . "evaluation" -> https://en.wikipedia.org/wiki/Eval#Lisp
/ += . "normalisation(?= that)" -> https://en.wikipedia.org/wiki/Normal_form_(abstract_rewriting)
/ += . "reference(?= that)" -> https://en.wikipedia.org/wiki/Referent
/ += . "Scheme" -> https://en.wikipedia.org/wiki/Scheme_(programming_language)

Once 2-LISP is constructed, adding the reflective capability to it is
relatively straightforward. Meta-level trap takes the form of a special lambda
expression:
/ += . "lambda expression" -> https://en.wikipedia.org/wiki/Anonymous_function#Lisp

; code
(lambda reflect [ARGS ENV CONT] BODY)

When this lambda function is applied (at the object level), the body is directly
executed (not interpreted) at the meta-level with `ARGS` bound to the meta-level
representation of the actual parameters, `ENV` bound to the _environment_
(basically, the list of identifiers and the values they are bound to) and `CONT`
bound to the continuation. Environment and continuation together represent the
3-LISP interpreter state (much like registers and memory represent the machine
language interpreter state), this representation goes all the way back to SECD
machine, see The Mechanical Evaluation of Expressions.
/ += . "continuation" -> https://en.wikipedia.org/wiki/Continuation
/ += . "SECD machine" -> https://en.wikipedia.org/wiki/SECD_machine
/ += . "The Mechanical Evaluation of Expressions" -> https://doi.org/10.1093%2Fcomjnl%2F6.4.308

Here is the fragment of 3-LISP meta-circular interpreter code that handles
`lambda reflect` (together with "ordinary" lambda-s, denoted by `lambda
simple`):
/ += . "fragment" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.lisp#L1570

; img
/ url https://raw.githubusercontent.com/nikitadanilov/nikitadanilov.github.io/master/3-lisp/reduce.png
/ width 75%

*Implementation*

It is of course not possible to run an infinite tower of interpreters directly.

; img
/ url https://raw.githubusercontent.com/nikitadanilov/nikitadanilov.github.io/master/3-lisp/infinity.png
/ width 75%

3-LISP implementation creates a meta-level on demand, when a reflective lambda
is invoked. At that moment the state of the meta-level interpreter is
synthesised (e.g., see `make-c1` in the listing above). The implementation takes
pain to detect when it can drop down to a lower level, which is not entirely
simple because a reflective lambda can, instead of returning (that is, invoking
the supplied continuation), run a potentially modified version of the
read-eval-loop (called `READ-NORMALISE-PRINT` in 3-LISP) which does not
return. There is a lot of non-trivial machinery operating behind the scenes and
though the implementation modestly proclaims itself _extremely inefficient_ it is,
in fact, remarkably fast.
/ += . "make-c1" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.lisp#L1586
/ += . "read-eval-loop" -> https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop
/ += . "READ-NORMALISE-PRINT" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.lisp#L1563
/ += . "EXTREMELY INEFFICIENT" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.lisp#L33

*Porting*

I was unable to find a digital copy of the 3-LISP sources and so manually
retyped the sources from the appendix of the thesis. The transcription in
3-lisp.lisp (2003 lines, 200K characters) preserves the original pagination and
character set, see the comments at the top of the file. Transcription was mostly
straightforward except for a few places where the PDF is illegible (for example,
see here) all of which fortunately are within comment blocks.
/ += . "3-lisp.lisp" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.lisp
/ += . "see here" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.lisp#L396

The sources are in CADR machine dialect of LISP, which, save for some minimal
and no longer relevant details, is equivalent to Maclisp.
/ += . "CADR machine" -> https://dspace.mit.edu/handle/1721.1/5718

3-LISP implementation does not have its own parser or interpreter. Instead, it
uses flexibility built in a LISP reader (see, readtables) to parse, interpret
and even compile 3-LISP with a very small amount of additional
code. Amazingly, this more than 40 years old code, which uses arcane features
like readtable customisation, runs on a modern Common Lisp platform after a very
small set of changes: some functions got renamed (`CASEQ` to `CASE`, `*CATCH` to
`CATCH`, etc.), some functions are missing (`MEMQ`, `FIXP`), some signatures
changed (`TYPEP`, `BREAK`, `IF`). See 3-lisp.cl for details.
/ += . "readtables" -> https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node192.html
/ += . "Common Lisp" -> https://en.wikipedia.org/wiki/Common_Lisp
/ += . "3-lisp.cl" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.cl

Unfortunately, the port does not run on _all_ modern Common Lisp
implementations, because it relies on the proper support for backquotes across
recursive reader invocations:
/ += . "backquotes" -> https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html
/ += . "invocations" -> https://github.com/nikitadanilov/3-lisp/blob/master/3-lisp.cl#L92

; code
;;     Maclisp maintains backquote context across recursive parser
;;     invocations. For example in the expression (which happens within defun
;;     3-EXPAND-PAIR)
;;
;;         `\(PCONS ~,a ~,d)
;;
;;     the backquote is consumed by the top-level activation of READ. Backslash
;;     forces the switch to 3-lisp readtable and call to 3-READ to handle the
;;     rest of the expression. Within this 3-READ activation, the tilde forces
;;     switch back to L=READTABLE and a call to READ to handle ",a". In Maclisp,
;;     this second READ activation re-uses the backquote context established by
;;     the top-level READ activation. Of all Common Lisp implementations that I
;;     tried, only sbcl correctly handles this situation. Lisp Works and clisp
;;     complain about "comma outside of backquote". In clisp,
;;     clisp-2.49/src/io.d:read_top() explicitly binds BACKQUOTE-LEVEL to nil.

Among Common Lisp implementations I tried, only sbcl supports it properly. After
reading Common Lisp Hyperspec, I believe that it is Maclisp and sbcl that
implement the specification correctly and other implementations are faulty.
/ += . "sbcl" -> https://www.sbcl.org/
/ += . "Hyperspec" -> http://www.lispworks.com/documentation/common-lisp.html

*Conclusion*

Procedural Reflection in Programming Languages is, in spite of its age, a very
interesting read. Not only does it contain an implementation of a refreshingly
new and bold idea (it is not even immediately obvious that infinite reflective
towers can at all be implemented, not to say with any reasonable degree of
efficiency), it is based on an interplay between mathematics and programming:
the model of computation is proposed and afterward implemented in
3-LISP. Because the model is implemented in an actual running program, it has
to be specified with extreme precision (which would make Tarski and Łukasiewicz
tremble), and any execution of the 3-LISP interpreter validates the model.
/ += . "Tarski" -> https://en.wikipedia.org/wiki/Alfred_Tarski
/ += . "Łukasiewicz" -> https://en.wikipedia.org/wiki/Jan_%C5%81ukasiewicz
